--lpm_add_sub CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 DEVICE_FAMILY="MAX V" LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=10 ONE_INPUT_IS_CONSTANT="NO" add_sub dataa datab result
--VERSION_BEGIN 13.1 cbx_cycloneii 2013:10:23:18:05:48:SJ cbx_lpm_add_sub 2013:10:23:18:05:48:SJ cbx_mgl 2013:10:23:18:06:54:SJ cbx_stratix 2013:10:23:18:05:48:SJ cbx_stratixii 2013:10:23:18:05:48:SJ  VERSION_END


-- Copyright (C) 1991-2013 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION maxv_lcell (aclr, aload, cin, clk, dataa, datab, datac, datad, ena, inverta, regcascin, sclr, sload)
WITH ( cin0_used, cin1_used, cin_used, lut_mask, operation_mode, output_mode, power_up, register_cascade_mode, sum_lutc_input, synch_mode, x_on_violation)
RETURNS ( combout, cout, regout);

--synthesis_resources = lut 11 
SUBDESIGN add_sub_h3g
( 
	add_sub	:	input;
	dataa[9..0]	:	input;
	datab[9..0]	:	input;
	result[9..0]	:	output;
) 
VARIABLE 
	add_sub_cella0 : maxv_lcell
		WITH (
			cin_used = "true",
			lut_mask = "96E8",
			operation_mode = "arithmetic",
			sum_lutc_input = "cin"
		);
	add_sub_cella1 : maxv_lcell
		WITH (
			cin_used = "true",
			lut_mask = "96E8",
			operation_mode = "arithmetic",
			sum_lutc_input = "cin"
		);
	add_sub_cella2 : maxv_lcell
		WITH (
			cin_used = "true",
			lut_mask = "96E8",
			operation_mode = "arithmetic",
			sum_lutc_input = "cin"
		);
	add_sub_cella3 : maxv_lcell
		WITH (
			cin_used = "true",
			lut_mask = "96E8",
			operation_mode = "arithmetic",
			sum_lutc_input = "cin"
		);
	add_sub_cella4 : maxv_lcell
		WITH (
			cin_used = "true",
			lut_mask = "96E8",
			operation_mode = "arithmetic",
			sum_lutc_input = "cin"
		);
	add_sub_cella5 : maxv_lcell
		WITH (
			cin_used = "true",
			lut_mask = "96E8",
			operation_mode = "arithmetic",
			sum_lutc_input = "cin"
		);
	add_sub_cella6 : maxv_lcell
		WITH (
			cin_used = "true",
			lut_mask = "96E8",
			operation_mode = "arithmetic",
			sum_lutc_input = "cin"
		);
	add_sub_cella7 : maxv_lcell
		WITH (
			cin_used = "true",
			lut_mask = "96E8",
			operation_mode = "arithmetic",
			sum_lutc_input = "cin"
		);
	add_sub_cella8 : maxv_lcell
		WITH (
			cin_used = "true",
			lut_mask = "96E8",
			operation_mode = "arithmetic",
			sum_lutc_input = "cin"
		);
	add_sub_cella9 : maxv_lcell
		WITH (
			cin_used = "true",
			lut_mask = "9696",
			operation_mode = "normal",
			sum_lutc_input = "cin"
		);
	strx_lcell1 : maxv_lcell
		WITH (
			cin_used = "false",
			lut_mask = "00CC",
			operation_mode = "arithmetic"
		);

BEGIN 
	add_sub_cella[9..0].cin = ( add_sub_cella[8..0].cout, strx_lcell1.cout);
	add_sub_cella[9..0].dataa = datab[];
	add_sub_cella[9..0].datab = dataa[];
	add_sub_cella[9..0].inverta = (! add_sub);
	strx_lcell1.dataa = B"0";
	strx_lcell1.datab = (! add_sub);
	strx_lcell1.inverta = (! add_sub);
	result[] = add_sub_cella[9..0].combout;
END;
--VALID FILE
